AWSTemplateFormatVersion: 2010-09-09
Description: "create VPC with additional CIDR Blocks, two public subnets and two private, internet gateway and nat gateway with Eip "

Parameters:

  VPCIpBlock:
    Description: Enter VPC CIDR Block. (i.e. 10.0.0.0/16 = 10.0.0.0-10.0.255.255 =
      256 Subnets - 65534 hosts)
    Type: String
    Default: 10.0.0.0/16
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  AvailabilityZone1:
    Description: Enter Availability Zone 1 for Public and Private Subnets to use.
    Type: String
    Default: a
    AllowedValues:
    - a
    - b
    - c
    - d
    - e
    - f
  AvailabilityZone2:
    Description: Enter Availability Zone 1 for Public and Private Subnets to use.
    Type: String
    Default: b
    AllowedValues:
    - a
    - b
    - c
    - d
    - e
    - f
  PublicSubnetCidrBlock1:
    Description: Enter Public Subnet 1 CIDR Block.
    Type: String
    Default: 10.0.1.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  PublicSubnetCidrBlock2:
    Description: Enter Public Subnet 2 CIDR Block.
    Type: String
    Default: 10.0.2.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern:  '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  PrivateSubnetCidrBlock1:
    Description: Enter Private Subnet 1 CIDR Block.
    Type: String
    Default: 10.0.4.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern:  '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  PrivateSubnetCidrBlock2:
    Description: Enter Private Subnet 2 CIDR Block.
    Type: String
    Default: 10.0.5.0/24
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern:  '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    
  SSHAccessCidr:
    Type: String
    Description: An IPv4 CIDR range to allow external SSH access from. Leave empty to deny SSH access.
    AllowedPattern: ^$|([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Should be valid CIDR   
  SetupNatGateway:
    Description: Setup NAT Gateway?
    Type: String
    Default: 'false'
    AllowedValues:
    - 'true'
    - 'false'       
    
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCIpBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
 
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
     - InternetGateway
     - VPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
      
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone1 ] ]
      CidrBlock: !Ref PublicSubnetCidrBlock1
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-public-az1' ] ]

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone2 ] ]
      CidrBlock: !Ref PublicSubnetCidrBlock2
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-public-az2' ] ]
        
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone1 ] ]
      CidrBlock: !Ref PrivateSubnetCidrBlock1
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-private-az1' ] ]

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ '', [ !Ref 'AWS::Region', !Ref AvailabilityZone2 ] ]
      CidrBlock: !Ref PrivateSubnetCidrBlock2
      Tags:
      - Key: Name
        Value: !Join [ '', [ !Ref 'AWS::StackName', '-private-az2' ] ]
        
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Public RT'

  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} Private Route Table'
          
  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: NatGatewayEIP
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId:
        Fn::GetAtt:
          - NatGatewayEIP
          - AllocationId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGateway'

  NetGatewayRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
      
  PublicAccessSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Public access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '8111'
          ToPort: '8111'
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '9090'
          ToPort: '9090'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName} public Secuirty Group'
          
  PrivateAccessSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh to client host
      VpcId:   !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref PublicAccessSG
      Tags:
        - Key: Name
          Value: TCSGSERVER

Metadata:

  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VPCSubnetCidrBlock
          - AvailabilityZone1
          - AvailabilityZone2
          - PublicSubnetCidrBlock1
          - PublicSubnetCidrBlock2
          - PrivateSubnetCidrBlock1
          - PrivateSubnetCidrBlock2

Outputs:
  VPC:
    Value: !Ref VPC
    Description: ID of VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  Publicsubnet1:
    Value: !Ref PublicSubnet1
    Description: ID of public subnet1
    Export:
      Name: !Sub ${AWS::StackName}-publicsubnet1
  Publicsubnet2:
    Value: !Ref PublicSubnet2
    Description: ID of public subnet2
    Export:
      Name: !Sub ${AWS::StackName}-publicsubnet2

  Privatesubnet1:
    Value: !Ref PrivateSubnet1
    Description: ID of private subnet1 
    Export:
      Name: !Sub '${AWS::StackName}-privatesubnet1'  
  Privatesubnet2:
    Value: !Ref PrivateSubnet2
    Description: ID of private subnet2 
    Export:
      Name: !Sub '${AWS::StackName}-privatesubnet2'     
  SecurityGroup:
    Value: !Ref PublicAccessSG
    Description: ID of security group
    Export:
      Name: !Sub ${AWS::StackName}-publicAccessSG
  SecurityGroup2:
    Value: !Ref  PrivateAccessSG
    Description: ID of security group
    Export:
      Name: !Sub ${AWS::StackName}-privateaccessSG
      