

AWSTemplateFormatVersion: "2010-09-09"

Description:
  This template deploys a EC2 and connect to database.
Mappings:
  AWSAMIRegionMap:
    AMI:
      "AmazonLinux64": amzn-ami-hvm-2017.03.1.20170812-x86_64-gp2
    us-east-1:
      "AmazonLinux64": ami-4fffc834
    us-east-2:
      "AmazonLinux64": ami-ea87a78f
    us-west-1:
      "AmazonLinux64": ami-3a674d5a
    us-west-2:
      "AmazonLinux64": ami-aa5ebdd2
    ca-central-1:
      "AmazonLinux64": ami-5ac17f3e
    eu-west-1:
      "AmazonLinux64": ami-ebd02392
    eu-central-1:
      "AmazonLinux64": ami-657bd20a
    eu-west-2:
      "AmazonLinux64": ami-489f8e2c
    ap-northeast-1:
      "AmazonLinux64": ami-4af5022c
    ap-northeast-2:
      "AmazonLinux64": ami-8663bae8
    ap-southeast-1:
      "AmazonLinux64": ami-fdb8229e
    ap-southeast-2:
      "AmazonLinux64": ami-0be2c101455544e7a
    ap-south-1:
      "AmazonLinux64": ami-d7abd1b8
    sa-east-1:
      "AmazonLinux64": ami-d27203be
Parameters:

  KeyName:
        Description: The existing EC2 KeyPair for SSH access to the EC2 instance running container with TeamCity server and agents
        Type: AWS::EC2::KeyPair::KeyName
        AllowedPattern: ".+"
  ImportValuefromVPCStack:

        Description: The name of the VPC  stack that exports the values
        Type: String
  ImportValuefromDBStack:
        Description: The name of the VPC  stack that exports the values
        Type: String      
  InstanceTypeServer:
      Type: String
      Default: t2.medium
      AllowedValues:
        - t2.medium
        - t2.large
        - t2.xlarge
  ServerRootVolumeSize:
    Type: Number
    Default: 30

  ServerBuildServerVolumeSize:
      Type: Number
      Default: 200
  TCServerPort:
      Type: String
      Default: '8111'
      
Metadata:

  AWS::CloudFormation::Interface: 
  
    ParameterGroups: 
      - 
        Label:
          default: " "
        Parameters:
          - KeyName
          - ImportValuefromVPCStack
          - ImportValuefromDBStack
      -
        Label:
          default: "Database Configuration "
        Parameters:
          - InstanceTypeServer
          - ServerRootVolumeSize
          - ServerBuildServerVolumeSize
          - TCServerPort
          
Resources: 

  TeamCityServer:
    Type: AWS::EC2::Instance
#    CreationPolicy:
#        Timeout: PT15M
#        Count: 1
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          MySQL:
            - cfn-init
            - volumes
            - java
            - download-connectors
            - download-tc
            - configure-tc
            - configure-tc-db-mysql
            - start-tc
        cfn-init:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.TeamCityServer.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource TeamCityServer --configsets 'MySQL' --region ${AWS::Region}
                runas=root
              mode: 000400
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        volumes:
          commands:
            a_pvcreate:
              command: pvcreate /dev/xvdf
            b_vgcreate:
              command: vgcreate vg0 /dev/xvdf
            c_lvcreate:
              command: lvcreate -l 100%FREE -n buildserver vg0
            d_mkfs:
              command: mkfs.ext4 /dev/vg0/buildserver
            e_mkdir:
              command: mkdir /var/buildserver
            f_fstab:
              command: echo "/dev/mapper/vg0-buildserver /var/buildserver ext4 defaults 0 2" >> /etc/fstab
            g_mount:
              command: mount -a
        java:
          packages:
            yum:
              java-1.8.0-openjdk: []
          commands:
            a-remove-java7:
              command: sudo yum remove -y java-1.7.0-openjdk
        download-connectors:
          files:
            /tmp/mysql-connector-java-8.0.13.tar.gz:
              source: https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.13.tar.gz
          commands:
            a-unpack-conn:
              command: cd /tmp && tar xfz /tmp/mysql-connector-java-8.0.13.tar.gz
        download-tc:
          files:
            /tmp/TeamCity-2018.1.3.tar.gz:
              source: https://download.jetbrains.com/teamcity/TeamCity-2018.1.3.tar.gz
          commands:
            a-unpack-tc:
              command: cd /tmp && tar xfz /tmp/TeamCity-2018.1.3.tar.gz
            b-move-tc:
              command: mv /tmp/TeamCity /opt
            c-remove-tmp:
              command: rm -rf /tmp/TeamCity-2018.1.3.tar.gz
        configure-tc:
          files:
            /opt/TeamCity/conf/teamcity-startup.properties:
              content: !Sub |
                teamcity.data.path=/var/buildserverps aux
              mode: 000644
              owner: root
              group: root
          commands:
            a-create-connector-dir:
              command: mkdir /var/buildserver/lib
            b-create-connector-dir2:
              command: mkdir /var/buildserver/lib/jdbc
            c-copy-connector-mysql:
              command: cp /tmp/mysql-connector-java-8.0.13/mysql-connector-java-8.0.13.jar /var/buildserver/lib/jdbc
            e-change-port:
              command: !Join
                - ""
                - - 'sed -i "s/8111/'
                  - !Ref TCServerPort
                  - '/g" /opt/TeamCity/conf/server.xml'
        configure-tc-db-mysql:
          files:
            /var/buildserver/config/database.properties:
              content: !Sub |
                connectionUrl=jdbc:mysql://teamcitydb.ccbc7enfr50t.ap-southeast-2.rds.amazonaws.com:3306//teamcitydb} 
                connectionProperties.user='teamcitydba'
                connectionProperties.password='Passw0rd'
              mode: 000644
              owner: root
              group: root
 
        start-tc:
          commands:
            a-set-env:
              command: export TEAMCITY_SERVER_MEM_OPTS="-Xmx1024m"
            b-start-tc:
              command: /opt/TeamCity/bin/teamcity-server.sh start
            c-rclocal:
              command: echo "export TEAMCITY_SERVER_MEM_OPTS=\"-Xmx1024m\"" >> rc.local
            d-rclocal:
              command: echo "/opt/TeamCity/bin/teamcity-server.sh start" >> rc.local
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", AmazonLinux64]
      InstanceType: !Ref InstanceTypeServer
      SecurityGroupIds: ['sg-0bea28d3bd9a294af']
#            Fn::ImportValue: !Sub '${ImportValuefromVPCStack}-publicAccessSG'
      SubnetId:       
            Fn::ImportValue: !Sub '${ImportValuefromVPCStack}-publicsubnet1'   

      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref ServerRootVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: !Ref ServerBuildServerVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      Tags:
      - Key: Name
        Value: TCSERVER
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum-config-manager --enable epel
            yum update -y aws-cfn-bootstrap
                        
            # Helper function
            function error_exit
            {
              /opt/aws/bin/cfn-signal -e 1 -r "$1" TeamCityServer
              exit 1
            }
            # Install application
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource TeamCityServer --configsets 'MySQL' --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # All is well so signal success
            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource TeamCityServer --region ${AWS::Region}
