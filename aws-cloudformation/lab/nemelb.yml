
AWSTemplateFormatVersion: '2010-09-09'
Description: Create a ELB
Metadata:
  TemplateAuthor: 'Yamin Niu'
Parameters:

  Owner:
    Type: String
    Default: EOL
    
  Project:
    Type: String
    Default: Nemsight
    
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be a list of at least two existing subnets associated
      with at least two different availability zones. They should be residing in the
      selected Virtual Private Cloud.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.      
  Certificate1ARN:
    Type: String
    Description: The ARN for the first certificate *energyone.com.au
    Default: arn:aws:acm:ap-southeast-2:719118481278:certificate/608967f5-6690-4355-af69-075b5a95edd5
    ConstraintDescription: must be the ARN of an existing certificate
    
Resources:

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        Ref: Subnets
      Tags:
       - Key: Name
         Value: !Join [ '', [ !Ref 'AWS::StackName', '-ELB' ] ]
       - Key: Owner
         Value: !Ref Owner
       - Key: Project
         Value: !Ref Project   
         
  ALBListenerService1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          Ref: Certificate1ARN

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 443
      Protocol: HTTPS
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: VPC
      Tags:
       - Key: Name
         Value: !Join [ '', [ !Ref 'AWS::StackName', '-TG' ] ]
       - Key: Owner
         Value: !Ref Owner
       - Key: Project
         Value: !Ref Project           
         
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTPS from the load balancer only
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId:
          Fn::Select:
          - 0
          - Fn::GetAtt:
            - ApplicationLoadBalancer
            - SecurityGroups
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        SourceSecurityGroupId:
          Fn::Select:
          - 0
          - Fn::GetAtt:
            - ApplicationLoadBalancer
            - SecurityGroups
      VpcId:
        Ref: VPC
      Tags:
       - Key: Name
         Value: !Join [ '', [ !Ref 'AWS::StackName', '-ELBSG' ] ]
       - Key: Owner
         Value: !Ref Owner
       - Key: Project
         Value: !Ref Project            
Outputs:
  URL:
    Description: The URL of the website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName
